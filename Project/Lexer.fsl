{
module Lexer

open Microsoft.FSharp.Text.Lexing
open Parser;

let lexemeAsString lexbuf = 
    LexBuffer<char>.LexemeString lexbuf

let keyword s =
	match s with
	| "bool"	-> BOOL
	| "else"	-> ELSE
	| "end"		-> END
	| "false"	-> FALSE
	| "fn"		-> FN
	| "hd"		-> HD
	| "if"		-> IF
	| "in"		-> IN
	| "int"		-> INT
	| "ise"		-> ISE
	| "list"	-> LIST
	| "local"	-> LOCAL
	| "not"		-> NOT
	| "null"	-> NULL
	| "print"	-> PRINT
	| "rec"		-> REC
	| "then"	-> THEN
	| "true"	-> TRUE
	| "unit"	-> UNIT
	| "var"		-> VAR
	| _			-> NAME s
}

rule Token = parse
	| [' ''\t''\r']		{ Token lexbuf }
	| '\n'				{ lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
	| ['0'-'9']+		{ NAT (System.Int32.Parse (lexemeAsString lexbuf)) }
	| ['a'-'z''A'-'Z''_']['a'-'z''A'-'Z''_''0'-'9']* { keyword (lexemeAsString lexbuf) }
	| '+'				{ PLUS }
	| '-'				{ MINUS }
	| '*'				{ TIMES }
	| '/'				{ DIV }
	| '='				{ EQ }
	| "<>"				{ NE }
	| '<'				{ LT }
	| "<="				{ LTE }
	| '('				{ LPAR }
	| ')'				{ RPAR }
	| '['				{ LBRACK }
	| ']'				{ RBRACK }
	| ';'				{ SEMI }
	| "=>"				{ ARROW }
	| "::"				{ DCOLON }
	| ':'				{ COLON }
	| eof				{ EOF }
	| _					{ failwith "Lexer Error: illegal symbol" }
	