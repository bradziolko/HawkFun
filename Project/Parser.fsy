%{
 open Absyn
%}

%token <int> CON
%token <string> VAR

%token BOOL ELSE END FALSE FN FUN HD IF IN INT ISE LIST
%token LOCAL NOT NULL PRINT REC THEN TRUE UNIT VAR
%token TL
%token PLUS MINUS TIMES DIV
%token EQ NE LT LTE
%token LPAR RPAR
%token LBRACK RBRACK
%token SEMI ARROW DCOLON
%token EOF

%right SEMI ARROW /* lowest precedence */
%nonassoc IF
%left ELSE
%left EQ NE
%nonassoc LT LTE
%right DCOLON
%left PLUS MINUS
%left TIMES DIV
%nonassoc NOT HD TL ISE LIST PRINT /* highest precedence */

%start Main
%type <Absyn.Expr> Main Expr AtExpr Const
%type <Absyn.Expr> TName Bindings Binding
%type <Absyn.Expr> AppExpr Type

Main:
	Expr EOF						{ $1 }
;

Expr:
	  AtExpr							{ $1 }
	| AppExpr							{ $1 }
	| IF Expr THEN Expr ELSE Expr		{ If ($2, $4, $6) } 
	| NOT Expr							{ not $2 }
	| HD Expr							{}
	| TL Expr							{}
	| ISE Expr							{}
	| PRINT Expr						{}
	| Expr PLUS Expr					{ Op2 ("+", $1, $3) }
	| Expr MINUS Expr					{ Op2 ("-", $1, $3) }
	| Expr TIMES Expr					{ Op2 ("*", $1, $3) }
	| Expr DIV Expr						{ Op2 ("/", $1, $3) }
	| Expr EQ Expr						{ Op2 ("=", $1, $3) }
	| Expr NE Expr						{ Op2 ("<>", $1, $3) }
	| Expr LT Expr						{ Op2 ("<", $1, $3) }
	| Expr LTE Expr						{ Op2 ("<=", $1, $3) }
	| Expr DCOLON Expr					{}
	| Expr SEMI Expr					{}
;
