%{
 open Absyn
%}

%token <int> CON
%token <string> VAR
%token <string> NAME

%token BOOL ELSE END FALSE FN FUN HD IF IN INT ISE LIST
%token LOCAL NOT NULL PRINT REC THEN TRUE UNIT VAR
%token TL
%token PLUS MINUS TIMES DIV
%token EQ NE LT LTE
%token LPAR RPAR
%token LBRACK RBRACK
%token SEMI ARROW DCOLON COLON
%token EOF

%right SEMI ARROW /* lowest precedence */
%nonassoc IF
%left ELSE
%left EQ NE
%nonassoc LT LTE
%right DCOLON
%left PLUS MINUS
%left TIMES DIV
%nonassoc NOT HD TL ISE LIST PRINT NAME /* highest precedence */

%start Main
%type <Absyn.Expr> Main Expr AtExpr Const
%type <Absyn.Expr> TName Bindings Binding
%type <Absyn.Expr> AppExpr Type

Main:
	Expr EOF								{ $1				 }
;

Expr:
	  AtExpr								{ $1				 }
	| AppExpr								{ $1				 }
	| IF Expr THEN Expr ELSE Expr			{ If ($2, $4, $6)	 } 
	| NOT Expr								{ Op1 ("not", $2)	 }
	| HD Expr								{					 }
	| TL Expr								{					 }
	| ISE Expr								{					 }
	| PRINT Expr							{					 }
	| Expr PLUS Expr						{ Op2 ("+", $1, $3)  }
	| Expr MINUS Expr						{ Op2 ("-", $1, $3)  }
	| Expr TIMES Expr						{ Op2 ("*", $1, $3)  }
	| Expr DIV Expr							{ Op2 ("/", $1, $3)  }
	| Expr EQ Expr							{ Op2 ("=", $1, $3)  }
	| Expr NE Expr							{ Op2 ("<>", $1, $3) }
	| Expr LT Expr							{ Op2 ("<", $1, $3)  }
	| Expr LTE Expr							{ Op2 ("<=", $1, $3) }
	| Expr DCOLON Expr						{ Op2 ("::", $1, $3) }
	| Expr SEMI Expr						{ Op2 (";", $1, $3)  }
;

AtomEx:
	  Const									{ $1				 }
	| NAME									{ $1				 }
	| LOCAL Bindings IN Expr END			{					 }
	| FN TName ARROW Expr END				{ expr (Lam ($2), ArrowT ($4)) }
	| LPAR Expr RPAR						{ ($2)				 }
	| LPAR LBRACK RBRACK COLON Type RPAR	{ expr (EListC, ListT $5) }
;

Const:
	  NAT									{ expr (Con $1, IntT) } //The non-terminal <nat> is a token defined by the regular expression [0-9]+
	| TRUE									{ expr (Con 1, BoolT) }
	| FALSE									{ expr (Con 0, BoolT) }
	| NULL									{ expr (Con 0, UnitT) }
;

TName:
	  LPAR NAME COLON Type RPAR				{ (tname ($2, $4), expr (Var $2, $4)) }
;

Bindings:
	  Binding								{ $1				 }
	| Binding Bindings						{					 }
;

Binding:
	  VAR NAME EQ Expr						{					 }
	| FUN NAME TName EQ Expr				{					 }
	| FUN REC NAME TName COLON Type EQ Expr {					 }
;

AppExpr:
	  AtExpr AtExpr							{					 }
	| AppExpr AtExpr						{					 }
;

Type:
	  UNIT									{					 }
	| INT									{					 }
	| Type ARROW Type						{					 }
	| Type LIST								{					 }
	| LPAR Type RPAR						{					 }
;
