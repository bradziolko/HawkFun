%{
 open Absyn
%}

%token <string> NAME
%token <int> NAT

%token BOOL ELSE END FALSE FN FUN HD IF IN INT ISE LIST
%token LOCAL NOT NULL PRINT REC THEN TRUE UNIT VAR
%token TL
%token PLUS MINUS TIMES DIV
%token EQ NE LT LTE
%token LPAR RPAR
%token LBRACK RBRACK
%token SEMI ARROW DCOLON COLON
%token EOF

%right SEMI ARROW /* lowest precedence */
%nonassoc IF
%left ELSE
%left EQ NE
%nonassoc LT LTE
%right DCOLON
%left PLUS MINUS
%left TIMES DIV
%nonassoc NOT HD TL ISE LIST PRINT NAME /* highest precedence */

%start Main
%type <Absyn.expr> Main Expr AtExpr Const
%type <Absyn.expr> TName Bindings Binding
%type <Absyn.expr> AppExpr Type

%%

Main:
	Expr EOF								{ $1				 }
;

Expr:
	  AtExpr								{ $1				 }
	| AppExpr								{ $1				 }
	| IF Expr THEN Expr ELSE Expr			{ If ($2, $4, $6)	 } 
	| NOT Expr								{ Op1 ("not", $2)	 }
	| HD Expr								{ Op1 ("hd", $2)	 }
	| TL Expr								{ Op1 ("tl", $2)	 }
	| ISE Expr								{ Op1 ("ise", $2)	 }
	| PRINT Expr							{ Op1 ("print", $2)	 }
	| Expr PLUS Expr						{ Op2 ("+", $1, $3)  }
	| Expr MINUS Expr						{ Op2 ("-", $1, $3)  }
	| Expr TIMES Expr						{ Op2 ("*", $1, $3)  }
	| Expr DIV Expr							{ Op2 ("/", $1, $3)  }
	| Expr EQ Expr							{ Op2 ("=", $1, $3)  }
	| Expr NE Expr							{ Op2 ("<>", $1, $3) }
	| Expr LT Expr							{ Op2 ("<", $1, $3)  }
	| Expr LTE Expr							{ Op2 ("<=", $1, $3) }
	| Expr DCOLON Expr						{ Op2 ("::", $1, $3) }
	| Expr SEMI Expr						{ Op2 (";", $1, $3)  }
;

AtExpr:
	  Const									{ $1				 }
	| NAME									{ $1				 }
	| LOCAL Bindings IN Expr END			{ 
											  List.foldBack(fun b e -> (Let (b, e), AnyT)) $2 $4 
										    }
	| FN TName ARROW Expr END				{ (Lam ($2), ArrowT ($4)) }
	| LPAR Expr RPAR						{ ($2)				 }
	| LPAR LBRACK RBRACK COLON Type RPAR	{ (EListC $5)		 }
;

Const:
	  NAT									{ (Con $1, IntT) } //The non-terminal <nat> is a token defined by the regular expression [0-9]+
	| TRUE									{ (Con 1, BoolT) }
	| FALSE									{ (Con 0, BoolT) }
	| NULL									{ (Con 0, UnitT) }
;

TName:
	  LPAR NAME COLON Type RPAR				{ (tname ($2, $4), expr (Var $2, $4)) }
;

Bindings:
	  Binding								{ [$1]				 }
	| Binding Bindings						{ $1 :: $2			 }
;

Binding:
	  VAR NAME EQ Expr						{ V ($2, $4)		 }
	| FUN NAME TName EQ Expr				{ V ($2, (Lam ($3, $5), AnyT) }
	| FUN REC NAME TName COLON Type EQ Expr { F ($3, $4, $6, $8  }
;

AppExpr:
	  AtExpr AtExpr							{ Call ($1, $2)		 }
	| AppExpr AtExpr						{ Call ($1, $2)		 }
;

Type:
	  UNIT									{ UnitT				 }
	| INT									{ IntT				 }
	| Type ARROW Type						{ ArrowT ($1, $3)	 }
	| Type LIST								{ ListT $1			 }
	| LPAR Type RPAR						{ ($2)				 }
;
